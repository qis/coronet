cmake_minimum_required(VERSION 3.9 FATAL_ERROR)
project(coronet VERSION 0.1.0 LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

if(MSVC)
  string(REPLACE "/W3" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  set(CMAKE_CXX_FLAGS "/std:c++latest /await ${CMAKE_CXX_FLAGS} /utf-8 /wd4100")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /manifestuac:NO /ignore:4098 /ignore:4099")
  add_definitions(-D_UNICODE -DUNICODE -DWIN32_LEAN_AND_MEAN -DNOMINMAX)
  add_definitions(-D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE -D_ATL_SECURE_NO_DEPRECATE)
  add_definitions(-D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS)
  add_definitions(-DWINVER=0x0A00 -D_WIN32_WINNT=0x0A00)
else()
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wpedantic -Wconversion -Wno-unused-parameter")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fcoroutines-ts -fdiagnostics-absolute-paths -fcolor-diagnostics")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -pthread")
endif()

if(MSVC)
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /GL")
  set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /LTCG")
  set(CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /LTCG")
else()
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -march=native")
  #set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -march=native -flto=thin")
  #set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} -fuse-ld=lld")
endif()

if(MSVC)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4530 /wd4577")
  string(REPLACE "/GR" "/GR-" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  string(REPLACE "/EHsc" "/EHs-c-" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
elseif()
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-rtti -fno-exceptions")
endif()

if(WIN32)
  #include_directories(C:/Workspace/include/freebsd)
  file(GLOB_RECURSE backend_sources src/coronet/iocp/*.h src/coronet/iocp/*.cpp
    #src/coronet/kqueue/*.h src/coronet/kqueue/*.cpp
  )
else()
  file(GLOB_RECURSE backend_sources src/coronet/kqueue/*.h src/coronet/kqueue/*.cpp)
endif()

file(GLOB_RECURSE headers include/coronet/*.h)
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR}/include/coronet PREFIX include FILES ${headers})

file(GLOB sources src/coronet/*.h src/coronet/*.cpp ${backend_sources})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR}/src/coronet PREFIX src FILES ${sources})

add_library(coronet STATIC ${headers} ${sources})

target_include_directories(coronet PRIVATE src PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>)

if(WIN32)
  set_target_properties(coronet PROPERTIES OUTPUT_NAME coronet-$<LOWER_CASE:$<CONFIG>>)
  target_link_libraries(coronet PUBLIC ws2_32 mswsock)
endif()

#find_package(OpenSSL)
#
#if(OPENSSL_FOUND)
#  file(GLOB_RECURSE openssl_sources src/coronet/openssl/*.h src/coronet/openssl/*.cpp)
#  source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR}/src/coronet PREFIX src FILES ${openssl_sources})
#  target_sources(coronet PRIVATE ${openssl_sources})
#  target_link_libraries(coronet PUBLIC OpenSSL::Crypto OpenSSL::SSL)
#endif()

install(DIRECTORY include/coronet DESTINATION include FILES_MATCHING PATTERN "*.h")

install(TARGETS coronet EXPORT coronet_export
  RUNTIME DESTINATION bin
  LIBRARY DESTINATION lib
  ARCHIVE DESTINATION lib)

if(NOT EXISTS ${CMAKE_CURRENT_BINARY_DIR}/coronet-config.cmake)
  file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/coronet-config.cmake
    [[include("${CMAKE_CURRENT_LIST_DIR}/coronet-targets.cmake")]])
endif()

install(FILES ${CMAKE_CURRENT_BINARY_DIR}/coronet-config.cmake DESTINATION lib/cmake)
install(EXPORT coronet_export FILE coronet-targets.cmake NAMESPACE coronet:: DESTINATION lib/cmake)

option(CORONET_BUILD_BENCHMARK "Build benchmark applications" ON)
option(CORONET_INSTALL_BENCHMARK "Install benchmark applications" ON)

if(CORONET_BUILD_BENCHMARK)
  add_executable(coronet_server src/coronet_server.cpp)
  target_link_libraries(coronet_server PRIVATE coronet)
  if(WIN32)
    set_target_properties(coronet_server PROPERTIES OUTPUT_NAME coronet_server_$<LOWER_CASE:$<CONFIG>>)
  endif()
  if(CORONET_INSTALL_BENCHMARK)
    install(TARGETS coronet_server DESTINATION bin)
  endif()
  if(WIN32)
    add_executable(winsock_client src/winsock_client.cpp)
    target_link_libraries(winsock_client PUBLIC ws2_32 mswsock)
    set_target_properties(winsock_client PROPERTIES OUTPUT_NAME winsock_client_$<LOWER_CASE:$<CONFIG>>)
    if(CORONET_INSTALL_BENCHMARK)
      install(TARGETS winsock_client DESTINATION bin)
    endif()
    add_executable(winsock_server src/winsock_server.cpp)
    target_link_libraries(winsock_server PUBLIC ws2_32 mswsock)
    set_target_properties(winsock_server PROPERTIES OUTPUT_NAME winsock_server_$<LOWER_CASE:$<CONFIG>>)
    if(CORONET_INSTALL_BENCHMARK)
      install(TARGETS winsock_server DESTINATION bin)
    endif()
  else()
    add_executable(sockets_client src/sockets_client.cpp)
    if(CORONET_INSTALL_BENCHMARK)
      install(TARGETS sockets_client DESTINATION bin)
    endif()
    add_executable(sockets_server src/sockets_server.cpp)
    if(CORONET_INSTALL_BENCHMARK)
      install(TARGETS sockets_server DESTINATION bin)
    endif()
  endif()
endif()

if(MSVC)
  set_property(GLOBAL PROPERTY USE_FOLDERS ON)
  set_property(GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER build)
  if(TARGET coronet_server)
    set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT coronet_server)
    set_target_properties(coronet_server PROPERTIES VS_DEBUGGER_WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
  endif()
  if(TARGET winsock_client)
    set_target_properties(winsock_client PROPERTIES VS_DEBUGGER_WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
  endif()
  if(TARGET winsock_server)
    set_target_properties(winsock_server PROPERTIES VS_DEBUGGER_WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
  endif()
else()
  set(CMAKE_EXPORT_COMPILE_COMMANDS 1)
endif()
